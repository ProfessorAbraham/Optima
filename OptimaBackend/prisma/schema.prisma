// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         String           @id @default(cuid())
  email          String           @unique
  hashedPassword String
  Habits         Habit[]
  Projects       Project[]
  ProjectMembers ProjectMembers[]
}

model Habit {
  habitId      String       @id @default(cuid())
  habitName    String
  description  String?
  unit         String?
  HabitEntry   HabitEntry[]
  quantifiable Boolean
  remindMe     Boolean
  remindTime   DateTime?
  user         User         @relation(fields: [userId], references: [userId])
  userId       String
}

model HabitEntry {
  entryId      Int      @id @default(autoincrement())
  quantity     Float?
  habit        Habit    @relation(fields: [habitHabitId], references: [habitId])
  habitHabitId String
  createdAt    DateTime @default(now())
}

model Project {
  projectId   String    @id @default(cuid())
  projectName String
  description String?
  hasDeadLine Boolean
  deadLine    DateTime?
  admin       User      @relation(fields: [adminId], references: [userId])
  adminId     String
  SubTask     SubTask[]

  ProjectMembers ProjectMembers[]
}

model ProjectMembers {
  project          Project @relation(fields: [projectProjectId], references: [projectId])
  projectProjectId String

  member     User   @relation(fields: [userUserId], references: [userId])
  userUserId String

  @@id([projectProjectId, userUserId])
}

model SubTask {
  subTaskId        Int     @id @default(autoincrement())
  subTaskName      String
  project          Project @relation(fields: [projectProjectId], references: [projectId])
  projectProjectId String
}
